.TH "int23_t::uint23_t" 3 "INT23_t" \" -*- nroff -*-
.ad l
.nh
.SH NAME
int23_t::uint23_t \- Unsigned 23 bit integer\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <int23_t\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBoperator<=\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "An operator to find if left \fBuint23_t\fP is smaller or equal to right \fBuint23_t\fP\&. "
.ti -1c
.RI "bool \fBoperator<\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "An operator to find if left \fBuint23_t\fP is smaller than right \fBuint23_t\fP\&. "
.ti -1c
.RI "bool \fBoperator>=\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "An operator to find if left \fBuint23_t\fP is greater or equal to right \fBuint23_t\fP\&. "
.ti -1c
.RI "bool \fBoperator>\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "An operator to find if left \fBuint23_t\fP is greater than right \fBuint23_t\fP\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator+\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "An operator to add two \fBuint23_t\fP's together\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator\-\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "An operator to substract an \fBuint23_t\fP from another\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator*\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "An operator to multiply an \fBuint23_t\fP with another\&. "
.ti -1c
.RI "template<typename T , typename std::enable_if< std::is_arithmetic< T >::value, int >::type  = 0> \fBuint23_t\fP (T const &a)"
.br
.RI "A constructor to create \fBuint23_t\fP from classes that can easily be represented as binary\&. "
.ti -1c
.RI "template<typename T , typename std::enable_if< std::is_arithmetic< T >::value, int >::type  = 0> \fBoperator T\fP () const"
.br
.RI "An operator for converting \fBuint23_t\fP to arithmetic types\&. see also https://en.cppreference.com/w/c/language/arithmetic_types\&. "
.ti -1c
.RI "\fBuint23_t\fP ()"
.br
.RI "Default constructor for \fBuint23_t\fP, sets the value to 0\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator<<\fP (int const &rhs) const"
.br
.RI "Left bitshift operator, same thing as multiplying by 2 n times\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator>>\fP (int const &rhs) const"
.br
.RI "Right bitshift operator, same thing as dividing by 2 n times\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator+=\fP (\fBuint23_t\fP const &rhs)"
.br
.RI "Operator for adding an \fBuint23_t\fP's value to the left \fBuint23_t\fP\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator\-=\fP (\fBuint23_t\fP const &rhs)"
.br
.RI "Operator for substracting an \fBuint23_t\fP's value from the left \fBuint23_t\fP\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator*=\fP (\fBuint23_t\fP const &rhs)"
.br
.RI "Operator for multiplying an \fBuint23_t\fP with the one in the right\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator/=\fP (\fBuint23_t\fP const &rhs)"
.br
.RI "Operator for dividing an \fBuint23_t\fP with the right hand side \fBuint23_t\fP\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator%=\fP (\fBuint23_t\fP const &rhs)"
.br
.RI "Operator for modulo-ing the current number in module rhs\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator++\fP ()"
.br
.RI "prefix increment operator "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator\-\-\fP ()"
.br
.RI "prefix decrement operator "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator++\fP (int)"
.br
.RI "postfix increment operator "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator\-\-\fP (int)"
.br
.RI "postfix decrement operator "
.ti -1c
.RI "bool \fBoperator==\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "Checks if two \fBuint23_t\fP are same\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator/\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "Operator for dividing an \fBuint23_t\fP with another\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator%\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "Operator for modulo-ing an \fBuint23_t\fP modulo another \fBuint23_t\fP\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator>>=\fP (int const &rhs)"
.br
.RI "Operator for shifting current \fBuint23_t\fP's internal bitset\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator<<=\fP (int const &rhs)"
.br
.RI "Operator for shifting current \fBuint23_t\fP's internal bitset\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator&\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "Bitwise and operator\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator|\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "Bitwise or operator\&. "
.ti -1c
.RI "\fBuint23_t\fP \fBoperator^\fP (\fBuint23_t\fP const &rhs) const"
.br
.RI "Bitwise xor operator\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator&=\fP (\fBuint23_t\fP const &rhs)"
.br
.RI "Bitwise operator for and-ing the current \fBuint23_t\fP\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator|=\fP (\fBuint23_t\fP const &rhs)"
.br
.RI "Bitwise operator for or-ing the current \fBuint23_t\fP\&. "
.ti -1c
.RI "\fBuint23_t\fP & \fBoperator^=\fP (\fBuint23_t\fP const &rhs)"
.br
.RI "Bitwise operator for xor-ing the current \fBuint23_t\fP\&. "
.ti -1c
.RI "\fBoperator std::string\fP () const"
.br
.RI "Converts \fBuint23_t\fP to string in base 10\&. "
.in -1c
.SH "Detailed Description"
.PP 
Unsigned 23 bit integer\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T , typename std::enable_if< std::is_arithmetic< T >::value, int >::type > int23_t::uint23_t::uint23_t (T const & a)"

.PP
A constructor to create \fBuint23_t\fP from classes that can easily be represented as binary\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP the value of \fBuint23_t\fP that is being constructed\&. Has to be an arithmetic type like int or char, see also https://en.cppreference.com/w/c/language/arithmetic_types
.RE
.PP
Constructs \fBuint23_t\fP using std::bitset's constructor, see also https://en.cppreference.com/w/cpp/utility/bitset/bitset 
.SS "int23_t::uint23_t::uint23_t ()"

.PP
Default constructor for \fBuint23_t\fP, sets the value to 0\&. Does the same thing as \fBuint23_t(T const& 0)\fP 
.SH "Member Function Documentation"
.PP 
.SS "template<typename T , typename std::enable_if< std::is_arithmetic< T >::value, int >::type > int23_t::uint23_t::operator T () const"

.PP
An operator for converting \fBuint23_t\fP to arithmetic types\&. see also https://en.cppreference.com/w/c/language/arithmetic_types\&. Uses std::bitset::to_ulong function\&. See also https://en.cppreference.com/w/cpp/utility/bitset/to_ulong 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator% (\fBuint23_t\fP const & rhs) const"

.PP
Operator for modulo-ing an \fBuint23_t\fP modulo another \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP, the modulo
.RE
.PP
Returns left \fBuint23_t\fP modulo right \fBuint23_t\fP 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator%= (\fBuint23_t\fP const & rhs)"

.PP
Operator for modulo-ing the current number in module rhs\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP The modulo that is currently being used\&.
.RE
.PP
The value of current number is equalised to the modulo of that number in modulo rhs\&. See also \fBoperator%()\fP 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator& (\fBuint23_t\fP const & rhs) const"

.PP
Bitwise and operator\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Uses std::bitset member function internally, see also https://en.cppreference.com/w/cpp/utility/bitset/operator_logic2 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator&= (\fBuint23_t\fP const & rhs)"

.PP
Bitwise operator for and-ing the current \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Sets the current uitn23_t's value to bitwise and of current and rhs's internal bitset\&. See also \fBoperator&()\fP 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator* (\fBuint23_t\fP const & rhs) const"

.PP
An operator to multiply an \fBuint23_t\fP with another\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBint23_t\&.cpp\fP 
.RE
.PP

.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator*= (\fBuint23_t\fP const & rhs)"

.PP
Operator for multiplying an \fBuint23_t\fP with the one in the right\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP the number current number is multiplied by\&.
.RE
.PP
The value of current number is multiplied by rhs and then returned\&. See also \fBoperator*()\fP 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator+ (\fBuint23_t\fP const & rhs) const"

.PP
An operator to add two \fBuint23_t\fP's together\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Uses \fBfullAdder()\fP function to calculate sum of two \fBuint23_t\fP's 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator++ ()"

.PP
prefix increment operator Same as \fBoperator+=(uint23_t const& 1)\fP 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator++ (int)"

.PP
postfix increment operator The current value is returned and than 1 is added to the current value\&. Same as \fBoperator++()\fP return ::operator-(1) 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator+= (\fBuint23_t\fP const & rhs)"

.PP
Operator for adding an \fBuint23_t\fP's value to the left \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP The number added to current number
.RE
.PP
The value of rhs is added to current number and current number is returned\&. See also \fBoperator+()\fP 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator\- (\fBuint23_t\fP const & rhs) const"

.PP
An operator to substract an \fBuint23_t\fP from another\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Uses \fBfullSub()\fP function to calculate difference of two \fBuint23_t\fP's 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator\-\- ()"

.PP
prefix decrement operator Same as \fBoperator-=(uint23_t const& 1)\fP 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator\-\- (int)"

.PP
postfix decrement operator The current value is returned and than 1 is substracted from the current value\&. Same as \fBoperator--()\fP return ::operator+(1) 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator\-= (\fBuint23_t\fP const & rhs)"

.PP
Operator for substracting an \fBuint23_t\fP's value from the left \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP The number substracted from the current number
.RE
.PP
The value of rhs is substracted from current number and current number is returned\&. See also \fBoperator-()\fP 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator/ (\fBuint23_t\fP const & rhs) const"

.PP
Operator for dividing an \fBuint23_t\fP with another\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Divides two \fBuint23_t\fP's and returns the value\&. 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator/= (\fBuint23_t\fP const & rhs)"

.PP
Operator for dividing an \fBuint23_t\fP with the right hand side \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP The number current number is multiplied by
.RE
.PP
The value of current number is divided by rhs and then returned\&. See also \fBoperator/()\fP 
.SS "bool int23_t::uint23_t::operator< (\fBuint23_t\fP const & rhs) const"

.PP
An operator to find if left \fBuint23_t\fP is smaller than right \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
If two bitsets are same, function returns false\&. Else it finds the first location where bits differ, and returns false if left side integers that bit is 1, returns false true 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator<< (int const & rhs) const"

.PP
Left bitshift operator, same thing as multiplying by 2 n times\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP The number of times \fBuint23_t\fP's bits are shifted\&.
.RE
.PP
Uses std::bitset::operator<< internally, see also https://en.cppreference.com/w/cpp/utility/bitset/operator_ltltgtgt 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator<<= (int const & rhs)"

.PP
Operator for shifting current \fBuint23_t\fP's internal bitset\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP The number of times bits are shifted
.RE
.PP
Shifts the current \fBuint23_t\fP's bits, see also \fBoperator<<()\fP 
.SS "bool int23_t::uint23_t::operator<= (\fBuint23_t\fP const & rhs) const"

.PP
An operator to find if left \fBuint23_t\fP is smaller or equal to right \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
If two bitsets are same, function returns true\&. Else it finds the first location where bits differ, and returns false if left side integers that bit is 1, returns true otherwise 
.SS "bool int23_t::uint23_t::operator== (\fBuint23_t\fP const & rhs) const"

.PP
Checks if two \fBuint23_t\fP are same\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Individualy checks every bit and if a single is different returns false, else returns true\&. 
.SS "bool int23_t::uint23_t::operator> (\fBuint23_t\fP const & rhs) const"

.PP
An operator to find if left \fBuint23_t\fP is greater than right \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
If two bitsets are same, function returns false\&. Else it finds the first location where bits differ, and returns true if left side integers that bit is 1, returns false otherwise 
.SS "bool int23_t::uint23_t::operator>= (\fBuint23_t\fP const & rhs) const"

.PP
An operator to find if left \fBuint23_t\fP is greater or equal to right \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
If two bitsets are same, function returns true\&. Else it finds the first location where bits differ, and returns true if left side integers that bit is 1, returns false otherwise 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator>> (int const & rhs) const"

.PP
Right bitshift operator, same thing as dividing by 2 n times\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP The number of times \fBuint23_t\fP's bits are shifted\&. 
.RE
.PP

.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator>>= (int const & rhs)"

.PP
Operator for shifting current \fBuint23_t\fP's internal bitset\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP The number of times bits are shifted
.RE
.PP
Shifts the current \fBuint23_t\fP's bits, see also \fBoperator>>()\fP 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator^ (\fBuint23_t\fP const & rhs) const"

.PP
Bitwise xor operator\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Uses std::bitset member function internally, see also https://en.cppreference.com/w/cpp/utility/bitset/operator_logic2 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator^= (\fBuint23_t\fP const & rhs)"

.PP
Bitwise operator for xor-ing the current \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Sets the current uitn23_t's value to bitwise xor of current and rhs's internal bitset\&. See also \fBoperator^()\fP 
.SS "\fBint23_t::uint23_t\fP int23_t::uint23_t::operator| (\fBuint23_t\fP const & rhs) const"

.PP
Bitwise or operator\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Uses std::bitset member function internally, see also https://en.cppreference.com/w/cpp/utility/bitset/operator_logic2 
.SS "\fBint23_t::uint23_t\fP & int23_t::uint23_t::operator|= (\fBuint23_t\fP const & rhs)"

.PP
Bitwise operator for or-ing the current \fBuint23_t\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIrhs\fP Right hand side \fBuint23_t\fP
.RE
.PP
Sets the current uitn23_t's value to bitwise or of current and rhs's internal bitset\&. See also \fBoperator|()\fP 

.SH "Author"
.PP 
Generated automatically by Doxygen for INT23_t from the source code\&.
